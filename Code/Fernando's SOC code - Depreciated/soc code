#include <Wire.h>
#include <Adafruit_INA260.h>
#include <EEPROM.h>  // EEPROM emulation for STM32

// CONFIG 
#define NUM_SENSORS 4
#define BATTERY_CAPACITY_AH 2.6
#define UPDATE_INTERVAL_MS 500
#define SOC_SAVE_INTERVAL 20
#define LOW_SOC_THRESHOLD 5.0

// EEPROM SoC STORAGE
float SoC = 100.0;
const int EEPROM_ADDR = 0;
bool notFirstRun = false;
bool configured = false;
bool batteryDead = false;
int cycleCount = 0;

// INA260 Instances for Each I2C Address 
Adafruit_INA260 sensors[NUM_SENSORS] = {
  Adafruit_INA260(),  // 0x40
  Adafruit_INA260(),  // 0x41
  Adafruit_INA260(),  // 0x44
  Adafruit_INA260()   // 0x45
};
const uint8_t sensorAddresses[NUM_SENSORS] = {0x40, 0x41, 0x44, 0x45};

// Control Pins 
const int loadPin = PA0;
const int chargePin = PA1;

// Timing
unsigned long lastUpdate = 0;

// Setup
void setup() {
  Serial.begin(115200);
  Wire.begin();

  // Load SoC from EEPROM
  EEPROM.get(EEPROM_ADDR, SoC);
  if (isnan(SoC) || SoC < 0.0 || SoC > 100.0) {
    Serial.println("First run: SoC EEPROM not valid.");
    SoC = 100.0;
    EEPROM.put(EEPROM_ADDR, SoC);
  } else {
    Serial.println("EEPROM found — loading saved SoC.");
    notFirstRun = true;
  }

  // Initialize INA260 sensors with specific addresses
  bool allSensorsOk = true;
  for (int i = 0; i < NUM_SENSORS; i++) {
    if (!sensors[i].begin(sensorAddresses[i])) {
      Serial.print("INA260 NOT found at address 0x");
      Serial.println(sensorAddresses[i], HEX);
      allSensorsOk = false;
    } else {
      Serial.print("INA260 found at 0x");
      Serial.println(sensorAddresses[i], HEX);
    }
  }

  if (allSensorsOk) {
    configured = true;
    Serial.println("All sensors OK — system configured.");
  }

  pinMode(loadPin, OUTPUT);
  pinMode(chargePin, OUTPUT);
  digitalWrite(loadPin, HIGH);
  digitalWrite(chargePin, HIGH);
}

// Main Loop 
void loop() {
  if (!configured) {
    Serial.println("System not configured — disconnecting everything.");
    digitalWrite(loadPin, LOW);
    digitalWrite(chargePin, LOW);
    delay(2000);
    return;
  }

  if (millis() - lastUpdate >= UPDATE_INTERVAL_MS) {
    lastUpdate = millis();
    updateSoC();
  }

  if (batteryDead) {
    digitalWrite(loadPin, LOW);
    digitalWrite(chargePin, LOW);
    Serial.println("Battery SoC critical — shutting down load and charging.");
  } else {
    digitalWrite(loadPin, HIGH);
    digitalWrite(chargePin, HIGH);
  }
}

//  SoC Calculation via Coulomb Counting
void updateSoC() {
  float totalCurrent_mA = 0;

  for (int i = 0; i < NUM_SENSORS; i++) {
    float current = sensors[i].getCurrent_mA();
    if (!isnan(current)) {
      totalCurrent_mA += current;
    }
  }

  // Convert to Ah used in 0.5s and subtract from SoC
  float deltaAh = (totalCurrent_mA / 1000.0) * (UPDATE_INTERVAL_MS / 1000.0 / 3600.0);
  SoC -= (deltaAh / BATTERY_CAPACITY_AH) * 100.0;
  SoC = constrain(SoC, 0.0, 100.0);
  cycleCount++;

  Serial.print("Current: ");
  Serial.print(totalCurrent_mA);
  Serial.print(" mA, SoC: ");
  Serial.print(SoC);
  Serial.println(" %");

  if (cycleCount >= SOC_SAVE_INTERVAL) {
    EEPROM.put(EEPROM_ADDR, SoC);
    Serial.println("SoC saved to EEPROM.");
    cycleCount = 0;
  }

  if (SoC <= LOW_SOC_THRESHOLD) {
    batteryDead = true;
  }
}
